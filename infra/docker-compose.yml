services:
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: app
      POSTGRES_PASSWORD: app
      POSTGRES_DB: app
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U app -d app -h localhost"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  api:
    build:
      context: ..
      dockerfile: api/Dockerfile
    working_dir: /app
    volumes:
      - ../api:/app/api:ro
      - ../rules:/app/rules:ro
      - ../worker:/app/worker:ro
      - ../configs:/app/configs:ro
      - ../schemas:/app/schemas:ro
      - ../templates:/app/templates:ro
      - ./secrets:/app/infra/secrets:ro
    env_file: ./.env
    environment:
      PYTHONPATH: /app
      POSTGRES_URL: postgresql://app:app@db:5432/app
      REDIS_URL: redis://redis:6379/0
      SECURITY_BACKEND: goplus
      
      # Expert endpoint settings
      EXPERT_VIEW: "on"
      EXPERT_KEY: "devkey"
      EXPERT_SOURCE: "pg"
      EXPERT_RATE_LIMIT_PER_MIN: "5"
      EXPERT_CACHE_TTL_SEC: "180"
      
      TELEGRAM_MODE: "mock"
      TELEGRAM_MOCK_PATH: "/tmp/telegram_sandbox.jsonl"
      TELEGRAM_SANDBOX_CHAT_ID: "123456"
      TELEGRAM_BOT_TOKEN: ""     # 开发期置空，别去连真TG
      
      # Telegram config (Day20+21)
      TG_BOT_TOKEN: ${TG_BOT_TOKEN:-}
      TG_CHANNEL_ID: ${TG_CHANNEL_ID:-}
      TG_RATE_LIMIT: ${TG_RATE_LIMIT:-20}
      TG_TIMEOUT_SECS: ${TG_TIMEOUT_SECS:-6}
      TG_SANDBOX: ${TG_SANDBOX:-}
      TG_SANDBOX_CHANNEL_ID: ${TG_SANDBOX_CHANNEL_ID:-}
      TG_SANDBOX_THREAD_ID: ${TG_SANDBOX_THREAD_ID:-}
      HTTPS_PROXY: ${HTTPS_PROXY:-}
      NO_PROXY: ${NO_PROXY:-localhost,127.0.0.1,db,redis}
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8000/healthz >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 5s

  worker:
    build:
      context: ..
      dockerfile: worker/Dockerfile
    working_dir: /app
    volumes:
      - ..:/app
      - ./secrets:/app/infra/secrets:ro
    env_file: ./.env
    environment:
      POSTGRES_URL: postgresql+psycopg2://app:app@db:5432/app
      REDIS_URL: redis://redis:6379/0
      CELERY_BROKER_URL: ${REDIS_URL}
      CELERY_RESULT_BACKEND: ${REDIS_URL}
      PYTHONPATH: /app:/app/worker/src
      
      # Telegram config (Day20+21)
      TG_BOT_TOKEN: ${TG_BOT_TOKEN:-}
      TG_CHANNEL_ID: ${TG_CHANNEL_ID:-}
      TG_RATE_LIMIT: ${TG_RATE_LIMIT:-20}
      TG_TIMEOUT_SECS: ${TG_TIMEOUT_SECS:-6}
      TG_SANDBOX: ${TG_SANDBOX:-}
      TG_SANDBOX_CHANNEL_ID: ${TG_SANDBOX_CHANNEL_ID:-}
      TG_SANDBOX_THREAD_ID: ${TG_SANDBOX_THREAD_ID:-}
      HTTPS_PROXY: ${HTTPS_PROXY:-}
      NO_PROXY: ${NO_PROXY:-localhost,127.0.0.1,db,redis}
    restart: always
    command: sh -lc "celery -A worker.app worker --beat -l info --pool=solo"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  otel:
    image: alpine:latest
    command: echo "OpenTelemetry placeholder"

volumes:
  postgres_data:

