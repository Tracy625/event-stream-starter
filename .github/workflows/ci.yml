name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort mypy
        pip install -r api/requirements.txt
        pip install -r worker/requirements.txt

    - name: Run Black
      run: black --check .

    - name: Run isort
      run: isort --check-only .

    - name: Run mypy
      run: mypy api/ worker/ --ignore-missing-imports
      continue-on-error: true  # Don't fail on type errors initially

  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-asyncio
        pip install -r api/requirements.txt
        pip install -r worker/requirements.txt

    - name: Run tests with coverage
      env:
        POSTGRES_URL: postgresql://test:test@localhost:5432/test_db
        DATABASE_URL: postgresql://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        DEMO_MODE: 1
        BQ_ENABLED: false
        BQ_PROJECT: dummy-project
        BQ_DATASET: dummy-dataset
        X_BACKEND: off
        ONCHAIN_BACKEND: off
        SECURITY_BACKEND: rules
      run: |
        pytest tests/ -v --cov=api --cov=worker --cov-report=xml --cov-report=term -k "not x_apify and not x_multisource" || true

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true  # Don't fail if Codecov is down

  docker-build:
    name: Docker Build Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build API image
      run: |
        docker build -t event-stream-starter/api:test -f api/Dockerfile .
      continue-on-error: true  # Allow failure if Dockerfile doesn't exist yet

    - name: Build Worker image
      run: |
        docker build -t event-stream-starter/worker:test -f worker/Dockerfile .
      continue-on-error: true  # Allow failure if Dockerfile doesn't exist yet

    - name: Test docker-compose
      run: |
        cp .env.minimal .env
        docker compose -f infra/docker-compose.yml config

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install safety
      run: pip install safety

    - name: Check for vulnerabilities
      run: |
        pip install -r api/requirements.txt
        pip install -r worker/requirements.txt
        safety check --json || true  # Don't fail on vulnerabilities yet
      continue-on-error: true

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
      continue-on-error: true

    - name: Upload Trivy results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'
      continue-on-error: true
